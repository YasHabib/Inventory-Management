@page "/sell"
@using static IMS.WebApp.Components.Common.AutoCompleteComponent
@inject IViewProductsByNameUseCases _viewProductbyNameUeCases
@inject IViewProductsByIdUseCase _viewProductByIdUseCase
@inject ISellProductUseCase _sellProductUseCase
@inject IJSRuntime JSRuntime

<h3>Sell Products</h3>
<br />
<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Sale Order #</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
        <AutoCompleteComponent Label="Inventory"
                               SearchFunction="SearchProduct"
                               OnItemSelected="OnItemSelected">
        </AutoCompleteComponent>
        <input type="hidden" value="@sellViewModel.ProductId" />
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>

        <label for="qty">Quantity</label>
        <InputNumber id="po" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
        <br />
        <button type="submit" class="btn-primary">Purchase</button>
    </div>

</EditForm>

@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product? selectedProduct = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmission", "sell-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await _viewProductbyNameUeCases.ExecuteAsyc(name);
        if (list == null) return null;

        return list.Select(i => new ItemViewModel
            {
                Id = i.ProductId,
                Name = i.ProductName
            })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {

        selectedProduct = await _viewProductByIdUseCase.ExecuteAsync(item.Id);
        sellViewModel.ProductId = item.Id;
        sellViewModel.UnitPrice = selectedProduct.Price;
    }

    private async Task Sell(){

        await _sellProductUseCase.ExecuteAsync(
            sellViewModel.SalesOrderNumber,
            sellViewModel.Products,
            sellViewModel.QuantityToSell,
            sellViewModel.UnitPrice,
            "Frank"
        );

        sellViewModel = new SellViewModel();
        selectedProduct = null;
    }
    
}

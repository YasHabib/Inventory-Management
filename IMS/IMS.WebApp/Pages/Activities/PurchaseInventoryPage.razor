@page "/purchase"
@attribute [Authorize(Policy = "Purchasers")]

@using IMS.UseCases.Actvities.Interfaces
@using IMS.WebApp.ViewModels
@using static IMS.WebApp.Components.Common.AutoCompleteComponent
@inject IViewInventoriesByNameUseCases _viewInventoriesByNameUseCases
@inject IViewInventoryByIdUseCase _viewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase _purchaseInventoryUseCase
@inject IJSRuntime JSRuntime

<h3>Purchase Inventory</h3>

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PurchaseOrderNumber" class="form-control"></InputText>
        <AutoCompleteComponent 
            Label="Inventory" 
            SearchFunction="SearchInventory"
            OnItemSelected="OnItemSelected">
        </AutoCompleteComponent>
        <input type="hidden" value="@purchaseViewModel.InventoryId"/>
        @if(purchaseViewModel.InventoryPrice > 0 && purchaseViewModel.InventoryPrice >= 0){
            <text>Price:</text>
            @purchaseViewModel.InventoryPrice.ToString("c");
        }

        <label for="qty">Quantity</label>
        <InputNumber id="po" @bind-Value="purchaseViewModel.QuantityPurchased" class="form-control"></InputNumber>
        <br />
        <button type="submit" class="btn-primary">Purchase</button>
    </div>

</EditForm>

@code {


    //Grabbing the logged in user's name
    private AuthenticationState? authenticationState;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
            authenticationState = await authenticationStateTask;
    }

    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender){
            JSRuntime.InvokeVoidAsync("PreventFormSubmission", "purchase-form");
        }
    }

    private async Task Purchase()
    {
        if(authenticationState != null)
        {
            await _purchaseInventoryUseCase.ExecuteAsync(
            purchaseViewModel.PurchaseOrderNumber,
            selectedInventory,
            purchaseViewModel.QuantityPurchased,
            authenticationState.User.Identity.Name
            );
        }

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }

    private async Task<List<ItemViewModel>?> SearchInventory(string name)
    {
        var list = await _viewInventoriesByNameUseCases.ExecuteAsync(name);

        if (list == null) return null;

        return list.Select(i => new ItemViewModel
            {
                Id = i.InventoryId,
                Name = i.InventoryName
            })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item){

        selectedInventory = await _viewInventoryByIdUseCase.ExecuteAsyc(item.Id);
        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }
}
